-- primary keys must be definitely unique 
                                        -- COLLECTIONS VISUAL: 
-----------------------------------------------------------------------------------------------------------
--  |       |                Year 2019                        |                Year 2020
--  |------------------------------------------------------------------------------------------------------
--  | ID1   |       MachineName1     |       MachineName2     |
--  | diane | Coin1 | Coin2 | Coin 3 | Coin1 | Coin2 | Coin 3 |
--  |       |   1   |   0   |    1   |   0   |   1   |    0   |
--  |------------------------------------------------------------------------------------------------------
--  | ID2   |       MachineName1     |       MachineName2     |
--  |       | Coin1 | Coin2 | Coin 3 | Coin1 | Coin2 | Coin 3 |
--  |       |   1   |       |    1   |       |       |        |
-----------------------------------------------------------------------------------------------------------
-- psql reviseddb -a -f revisedDB.psql  

DROP TABLE IF EXISTS users cascade;
DROP TABLE IF EXISTS machines cascade;
DROP TABLE IF EXISTS collections cascade;
DROP TABLE IF EXISTS coins cascade;
DROP TABLE IF EXISTS locations cascade;

CREATE TABLE users(
    id SERIAL,
    userid TEXT,
    email TEXT,
    pass TEXT,
    PRIMARY KEY (id) 
);

CREATE TABLE machines(
    id SERIAL PRIMARY KEY,
    machinename TEXT
);

CREATE TABLE locations(
    id SERIAL PRIMARY KEY,
    col_n DECIMAL(7,3),  
    col_w DECIMAL(7,3),  
    fk_machine_id INT REFERENCES machines (id)  
);

CREATE TABLE coins(
    id SERIAL PRIMARY KEY,
    coinname text,
    fk_machine_id INT REFERENCES machines (id)
);

CREATE TABLE collections(
    id SERIAL,
    PRIMARY KEY (id),
    fk_user_id INT REFERENCES users (id),
    fk_coins_id INT REFERENCES coins (id)
);

CREATE OR REPLACE FUNCTION insert_user(username TEXT, mail TEXT, pw TEXT) RETURNS void AS
    $$
    -- DECLARE collectionid INT;
    BEGIN
        -- INSERT INTO collections values(default) RETURNING id INTO collectionid;
        INSERT INTO users (userid, email, pass) VALUES (username, mail, pw);
    END;
    $$ LANGUAGE PLPGSQL;

-- for every machine you add, you insert 3 coins as well 
CREATE OR REPLACE FUNCTION create_machine(machine TEXT) RETURNS void AS
    $$
    BEGIN
        INSERT INTO machines (machinename) VALUES (machine);
    END;
    $$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION insert_machine(fk_machine INT, coin_one TEXT, coin_two TEXT, coin_three TEXT, n DECIMAL, w DECIMAL) RETURNS void AS
    $$
    BEGIN
        INSERT INTO coins (coinname, fk_machine_id) VALUES (coin_one, fk_machine);
        INSERT INTO coins (coinname, fk_machine_id) VALUES (coin_two, fk_machine);
        INSERT INTO coins (coinname, fk_machine_id) VALUES (coin_three, fk_machine);
        INSERT INTO locations (col_n, col_w, fk_machine_id) VALUES (n, w, fk_machine);
    END;
    $$ LANGUAGE PLPGSQL;


-- --using "insert_user" function prevents u from having to type out all the params and values 
SELECT insert_user('diane', 'd@gmail.com', 'p0ma');
SELECT insert_user('chandler', 'c@gmail.com', 'lavitar');
SELECT create_machine('Penny Arcade #1');
SELECT insert_machine(1, 'Peter Pan, Walts "Leave Todayâ€¦"', 'pennyname', 'another penny', 33.811259, -117.919210);

INSERT INTO collections (fk_user_id, fk_coins_id)
VALUES (1, 3);

INSERT INTO collections (fk_user_id, fk_coins_id)
VALUES (1, 1);
----------------------------------------------------------

SELECT * FROM users;
SELECT * FROM machines;
SELECT * FROM locations; 
SELECT * FROM coins;
SELECT * FROM collections;

SELECT * FROM machines
LEFT JOIN locations ON locations.fk_machine_id = machines.id
LEFT JOIN coins ON coins.fk_machine_id = machines.id;

SELECT * FROM users
LEFT JOIN collections ON collections.fk_user_id = users.id
-- WHERE userid = 'diane';

